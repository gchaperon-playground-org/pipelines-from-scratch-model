name: Release
on:
  push:
    branches:
      - master
  repository_dispatch:
    types: [semantic-release]
  workflow_dispatch:
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release@24
  push-components:
    name: Push KFP Components
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          # NOTE: our versioning scheme depends on git tags, so it's kinda
          # important to fetch tags here
          fetch-tags: true
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: pipelines-from-scratch
          service_account: gha-gchaperon-playground-org@pipelines-from-scratch.iam.gserviceaccount.com
          workload_identity_provider: projects/251863247499/locations/global/workloadIdentityPools/github/providers/gha-gchaperon-v2
          token_format: access_token
      - uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Install python package
        run: pip install -c requirements.txt -e . # NOTE: editable install (-e flag) is kinda important to avoid having one component with multiple paths
      - name: Compile and push components
        run: kfp component build --component-filepattern "src/**/*.py" . # NOTE: without proper auth this fails silently. What.
      - name: Upload component metadata
        run: |
          gsutil -m cp \
            component_metadata/* \
            gs://pipelines-from-scratch-kfp-component-metadata-ea624a34/$(pipx run hatch version)/
  push-pipeline:
    name: Push Pipeline Specs
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml
      - uses: google-github-actions/auth@v2
        with:
          project_id: pipelines-from-scratch
          service_account: gha-gchaperon-playground-org@pipelines-from-scratch.iam.gserviceaccount.com
          workload_identity_provider: projects/251863247499/locations/global/workloadIdentityPools/github/providers/gha-gchaperon-v2
      - name: Install
        run: pip install -c requirements.txt .
      - name: Compile pipeline
        run: kfp dsl compile --py src/pipelines_from_scratch/pipelines.py --output pipeline.yaml
      - name: Push pipeline
        shell: python
        run: |
          import pipelines_from_scratch
          from kfp.registry import RegistryClient

          HOST = "https://us-central1-kfp.pkg.dev/pipelines-from-scratch/pipelines"
          client = RegistryClient(host=HOST)

          template_name, template_version = client.upload_pipeline(
              file_name="pipeline.yaml",
              tags=[pipelines_from_scratch.__version__, "latest"],
          )

          print(f"{template_name}/{template_version}")
